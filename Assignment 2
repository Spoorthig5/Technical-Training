Q1.Given 3 int values, a b c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count.
luckySum(1, 2, 3) → 6
luckySum(1, 2, 13) → 3
luckySum(1, 13, 3) → 1

Code :
import java.util.*;
public class LuckySumExample {
public static void main(String[] args) {
System.out.println(luckySum(1, 2, 3)); // Output: 6
System.out.println(luckySum(1, 2, 13)); // Output: 3
System.out.println(luckySum(1, 13, 3)); // Output: 1
}

public static int luckySum(int a, int b, int c) {
if (a == 13) {
return 0;
} else if (b == 13) {
return a;
} else if (c == 13) {
return a + b;
} else {
return a + b + c;
}
}
}

Q2.Given 3 int values, a b c, return their sum. However, if any of the values is a teen -- in the range 13..19 inclusive -- then that value counts as 0, except 15 and 16 do not count as a teens. Write a separate helper "public int fixTeen(int n) {"that takes in an int value and returns that value fixed for the teen rule. In this way, you avoid repeating the teen code 3 times (i.e. "decomposition"). Define the helper below and at the same indent level as the main noTeenSum().
noTeenSum(1, 2, 3) → 6
noTeenSum(2, 13, 1) → 3
noTeenSum(2, 1, 14) → 3

Code :
import java.util.*;
public class NoTeenSum {
public static void main(String[] args) {
System.out.println(noTeenSum(1, 2, 3)); // Output: 6

System.out.println(noTeenSum(2, 13, 1)); // Output: 3
System.out.println(noTeenSum(2, 1, 14)); // Output: 3
}

public static int noTeenSum(int a, int b, int c) {
return fixTeen(a) + fixTeen(b) + fixTeen(c);
}

public static int fixTeen(int n) {
if ((n >= 13 && n <= 14) || (n >= 17 && n <= 19)) {
return 0;
}
return n;
}
}

Q3.You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.
greenTicket(1, 2, 3) → 0
greenTicket(2, 2, 2) → 20
greenTicket(1, 1, 2) → 10

Code:
import java.util.*;
public class GreenTicket {
public static int greenTicket(int a, int b, int c) {
if (a == b && b == c) {
return 20;
} else if (a == b || b == c || a == c) {
return 10;
} else {
return 0;
}
}
public static void main(String[] args) {
System.out.println(greenTicket(1, 2, 3)); // Output: 0
System.out.println(greenTicket(2, 2, 2)); // Output: 20
System.out.println(greenTicket(1, 1, 2)); // Output: 10
}
}
